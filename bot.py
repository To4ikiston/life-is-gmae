# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
from supabase import create_client, Client
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import numpy as np
import asyncio
import logging
import os
import sys
import nest_asyncio
from functools import lru_cache
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest, TelegramError
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from quart import Quart, request
from hypercorn.asyncio import serve
from hypercorn.config import Config
# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from tenacity import retry, stop_after_attempt, wait_exponential
application = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
nest_asyncio.apply()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Quart(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
PORT = int(os.getenv("PORT", "8000"))
SECRET_TOKEN = os.getenv("SECRET_TOKEN")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

FRIEND_ID = 424546089
MY_ID = 1181433072

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
bot_data = {
    "friend_count": 0,
    "my_count": 0,
    "thread_id": None,
    "actions_chat_id": None,
    "actions_msg_id": None
}
data_lock = asyncio.Lock()
try:
    # 2.1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # 2.2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
    test = supabase.table("actions").select("user_id").limit(1).execute()
    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")

except Exception as e:
    # 2.3. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {str(e)}")
    sys.exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞



async def load_initial_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    try:
        data = supabase.table("actions").select("*").execute().data
        bot_data["friend_count"] = sum(row["count"] for row in data if row["user_id"] == FRIEND_ID)
        bot_data["my_count"] = sum(row["count"] for row in data if row["user_id"] == MY_ID)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –Ø–Ω={bot_data['my_count']}, –ï–≥–æ—Ä={bot_data['friend_count']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤, –Ω–æ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
async def safe_edit_message(context, chat_id, msg_id, text, reply_markup):
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=msg_id,
        text=text,
        reply_markup=reply_markup
    )

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Health Check
@app.route('/health')
async def health():
    return 'OK', 200

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Telegram
@app.route('/telegram', methods=['POST'])
async def telegram_webhook():
    if application is None:
        logger.error("–ë–æ—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return 'Server Error', 500
    # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_TOKEN:
        return 'Forbidden', 403
        
    try:
        json_data = await request.get_json()
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        return 'OK', 200
    except BadRequest as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {str(e)}")
        return 'Bad Request', 400
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {str(e)}")
        return 'Error', 500
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return 'Server Error', 500

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start_actions –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç—Å–ª–µ–¥–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /edit_count <friend|me> <—á–∏—Å–ª–æ> —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}", exc_info=True)

async def start_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        thread_id = update.message.message_thread_id
        if thread_id is None:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ç–µ–º–∞ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_actions –≤ —Ç–µ–º–µ!")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        bot_data.setdefault("friend_count", 0)
        bot_data.setdefault("my_count", 0)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        bot_data["thread_id"] = thread_id
        bot_data["actions_chat_id"] = update.effective_chat.id

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º
        button_text = f"{bot_data['friend_count']}/{bot_data['my_count']}"
        keyboard = [[InlineKeyboardButton(button_text, callback_data="none")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        sent_msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°—á—ë—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π:\n",
            reply_markup=reply_markup,
            message_thread_id=thread_id
        )
        bot_data["actions_msg_id"] = sent_msg.message_id

        await update.message.reply_text("–°—á—ë—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start_actions: {str(e)}", exc_info=True)

async def count_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message is None:
            return

        if not bot_data["thread_id"]:
            return

        if update.message.message_thread_id != bot_data["thread_id"]:
            return

        user_id = update.effective_user.id
        today = datetime.now().strftime("%Y-%m-%d")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        if user_id not in [FRIEND_ID, MY_ID]:
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ –ø–∞–º—è—Ç–∏ –û–î–ò–ù –†–ê–ó
        async with data_lock:
            if user_id == FRIEND_ID:
                bot_data["friend_count"] += 1
            else:
                bot_data["my_count"] += 1

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å Supabase
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—ã
            existing = supabase.table('actions') \
                .select("count") \
                .eq("user_id", user_id) \
                .eq("date", today) \
                .execute().data

            if existing and len(existing) > 0:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ count
                new_count = existing[0]['count'] + 1
                response = supabase.table('actions') \
                    .update({"count": new_count}) \
                    .eq("user_id", user_id) \
                    .eq("date", today) \
                    .execute()
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                response = supabase.table('actions') \
                    .insert({"user_id": user_id, "date": today, "count": 1}) \
                    .execute()

            if response.error:
                raise Exception(f"Supabase error: {response.error}")

        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            async with data_lock:
                if user_id == FRIEND_ID:
                    bot_data["friend_count"] -= 1
                else:
                    bot_data["my_count"] -= 1
            logger.error(f"–û—à–∏–±–∫–∞ Supabase: {str(e)}")
            raise

        await update_counter_message(context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)



async def help_counter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /help_counter –≤—ã–∑–≤–∞–Ω–∞")
    help_text = (
        "üõ†Ô∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-—Å—á–µ—Ç—á–∏–∫—É* üõ†Ô∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ–º–µ —á–∞—Ç–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üîπ `/start_actions` ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –≤ —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã.\n"
        "üîπ `/edit_count <friend|me> <—á–∏—Å–ª–æ>` ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é.\n"
        "üîπ `/stats_counter <–ø–µ—Ä–∏–æ–¥>` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü/–≤—Å–µ –≤—Ä–µ–º—è).\n"
        "üîπ `/help_counter` ‚Äî –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚ñ´Ô∏è `/edit_count me +5` ‚Äî –£–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à —Å—á—ë—Ç—á–∏–∫ –Ω–∞ 5.\n"
        "‚ñ´Ô∏è `/stats_counter week` ‚Äî –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é.\n\n"
        "üìå _–ß—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞–ª–∏, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ._"
    )
    try:
        await update.effective_message.reply_text(
            help_text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /help_counter: {str(e)}", exc_info=True)

async def update_counter_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        chat_id = bot_data["actions_chat_id"]
        msg_id = bot_data["actions_msg_id"]
        
        if not chat_id or not msg_id:
            return

        button_text = f"{bot_data['friend_count']}/{bot_data['my_count']}"
        keyboard = [[InlineKeyboardButton(button_text, callback_data="none")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await safe_edit_message(context, chat_id, msg_id, "–°—á—ë—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π:\n", reply_markup)
    except BadRequest as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_counter_message: {str(e)}", exc_info=True)

async def generate_plot(df: pd.DataFrame, period: str) -> BytesIO:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞, –º–æ–∂–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:
    plt.style.use('seaborn-darkgrid')
    fig, ax = plt.subplots(figsize=(12, 6))

    try:
        if df.empty:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', 
                    ha='center', va='center', fontsize=14)
            ax.set_title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π", fontsize=16)
            ax.set_xlabel("–î–∞—Ç–∞", fontsize=14)
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π", fontsize=14)
            buf = BytesIO()
            plt.tight_layout()
            plt.savefig(buf, format='png', bbox_inches='tight', dpi=120)
            buf.seek(0)
            plt.close()
            return buf

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df['date'] = pd.to_datetime(df['date'])
        df_grouped = df.groupby(['user_id', 'date'])['count'].sum().unstack(level=0).fillna(0)
        all_dates = pd.date_range(df['date'].min(), df['date'].max())
        df_grouped = df_grouped.reindex(all_dates, fill_value=0)

        dates = df_grouped.index
        yan = df_grouped.get(MY_ID, pd.Series(0, index=dates))
        egor = df_grouped.get(FRIEND_ID, pd.Series(0, index=dates))

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        bar_width = 0.35
        x = np.arange(len(dates))
        ax.bar(x - bar_width/2, yan, bar_width, label='–Ø–Ω', color='#3498db', alpha=0.7)
        ax.bar(x + bar_width/2, egor, bar_width, label='–ï–≥–æ—Ä', color='#2ecc71', alpha=0.7)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Ç—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if len(dates) >= 3:
            window = min(3, len(dates))
            ax.plot(x, yan.rolling(window).mean(), color='#2980b9', linestyle='--', label='–¢—Ä–µ–Ω–¥ –Ø–Ω')
            ax.plot(x, egor.rolling(window).mean(), color='#27ae60', linestyle='--', label='–¢—Ä–µ–Ω–¥ –ï–≥–æ—Ä')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        ax.set_xticks(x)
        ax.set_xticklabels([d.strftime("%d.%m") for d in dates], rotation=45)
        ax.set_title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π", fontsize=16)
        ax.set_xlabel("–î–∞—Ç–∞", fontsize=14)
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π", fontsize=14)
        ax.legend()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        ax.grid(True, linestyle='--', alpha=0.7)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –¥–∞—Ç
        fig.autofmt_xdate()

    except Exception as e:
        ax.clear()
        ax.text(0.5, 0.5, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞', 
                ha='center', va='center', fontsize=14, color='red')
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    finally:
        buf = BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png', bbox_inches='tight', dpi=120)
        buf.seek(0)
        plt.close()
        return buf

@lru_cache(maxsize=10)
async def generate_plot_cached(df_hash: str, period: str) -> BytesIO:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ DataFrame
        df = pd.read_json(df_hash, orient='split')
        return await generate_plot(df, period)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        raise

async def edit_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        args = context.args
        if len(args) < 2:
            await update.effective_message.reply_text("–§–æ—Ä–º–∞—Ç: /edit_count <friend|me> <—á–∏—Å–ª–æ>")
            return

        who = args[0].lower()
        try:
            delta = int(args[1])
        except ValueError:
            await update.effective_message.reply_text("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        async with data_lock:
            if who == "friend":
                bot_data["friend_count"] += delta
            elif who == "me":
                bot_data["my_count"] += delta
            else:
                await update.effective_message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'friend' –∏–ª–∏ 'me'.")
                return

        # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É
        await update_counter_message(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit_count: {str(e)}", exc_info=True)

async def stats_counter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        args = context.args
        period = "week"
        
        if args:
            if args[0] in ["week", "month", "all"]:
                period = args[0]
            else:
                try:
                    start_date = datetime.strptime(args[0], "%Y-%m-%d")
                    end_date = datetime.strptime(args[1], "%Y-%m-%d") if len(args) > 1 else datetime.now()
                    
                    if end_date < start_date:
                        await update.effective_message.reply_text("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.")
                        return
                        
                    period = "custom"
                except ValueError:
                    await update.effective_message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
                    return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
        query = supabase.table("actions")
        today = datetime.now()
        if period == "week":
            start_date = today - timedelta(days=7)
            query = query.gte("date", start_date.strftime("%Y-%m-%d"))
        elif period == "month":
            start_date = today.replace(day=1)
            query = query.gte("date", start_date.strftime("%Y-%m-%d"))
        elif period == "custom":
            query = query.gte("date", start_date.strftime("%Y-%m-%d")).lte("date", end_date.strftime("%Y-%m-%d"))

        query = query.in_("user_id", [FRIEND_ID, MY_ID])
        data = query.select("user_id, date, count").execute().data
        df = pd.DataFrame(data)
        df_hash = df.to_json(orient='split')
        plot_buf = await generate_plot_cached(df_hash, period)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=plot_buf,
            caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats_counter: {str(e)}", exc_info=True)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if isinstance(context.error, TelegramError):
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram: {context.error.message}")

async def main():
    global application
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = (
    ApplicationBuilder()
        .token(BOT_TOKEN)
        .read_timeout(30)  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        .write_timeout(30)  # –ò —ç—Ç—É
        .build()
    )

    await load_initial_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("start_actions", start_actions))
    application.add_handler(CommandHandler("edit_count", edit_count))
    application.add_handler(CommandHandler("stats_counter", stats_counter))
    application.add_handler(CommandHandler("help_counter", help_counter))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, count_messages))
    application.add_error_handler(error_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await application.bot.set_webhook(
        url=f"{APP_URL}/telegram",
        secret_token=SECRET_TOKEN
    )
    
    # –ó–∞–ø—É—Å–∫ Quart —á–µ—Ä–µ–∑ Hypercorn
    config = Config()
    config.bind = [f"0.0.0.0:{PORT}"]
    await serve(app, config)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
